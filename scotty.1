.TH SCOTTY 1 "APRIL 2016" ScoTTY "scotty"
.SH NAME

scotty \- Specify Characters On a TTY

.SH DESCRIPTION

Much like
.BR readline(3)
for binary data: ScoTTY lets you quickly send arbitrary binary strings to
standard output.

.SH MOTIVATION

Often, you want to send a binary string on the command line. For example, you
may be sending shellcode over
.BR netcat(1)
or seeing how
.BR figlet(1)
behaves with accented Unicode characters.

Unfortunately, specifying binary data is rather tricky. Using
.BR echo(1)
is one option. However, there are pitfalls. For example,
.BR echo(1)
adds a trailing newline unless you use the
.BR -n
option (which several implementations such as that of
.BR sh(1)
fail to support). Also, escaping characters (with the
.BR -e
option) gets difficult after more than one layer of backslashes, since the
shell itself also tries to do some escaping.

A better option might be
.BR printf(1)
but it isn't interactive: you must specify the string to be printed in the
command, and so you cannot modify the payload based on the output of the
command you want to pipe it to. You might try
.BR cat(1)
with argument
.BR -
to read from stdin interactively, but this doesn't allow arbitrary binary input
and so we are back where we started.

With ScoTTY, you can do things like

.RS
$ scotty | nc evil.site.com 1337
.RE

and then pipe whatever binary data you wish.

.SH INSTALLATION

Using the attached Makefile should suffice on most Unix systems. On OSX, the
attached Ruby file acts as a Homebrew Formula. Binaries for Linux and OSX are
available on the Releases section of this repository. Scotty has no
dependencies, so it is highly portable and can be user-installed to a home
directory, or even copied to a server with
.BR scp(1)
or equivalent.

.SH KEYBINDINGS

.IP ^D
[D]one with message (send current message to stdout)

.IP ^C
[C]lear current message (press twice to [C]ancel session)

.IP ^X
Erase a character

.IP backspace
Erase a character

.IP ^L
C[l]ear and redraw (in case the terminal output breaks for some reason).

.IP \\\\
Input an ANSI-C string escape character (supports \\a, \\b, \\e, \\f, \\n, \\r,
\\t, \\v and \\x** for a raw hex value)

.IP \\\\!
Input from shell (brings up a prompt for
.BR sh(1)
and inserts stdout value into buffer).

.SH MISC OTHER TRICKS

You can set an environment variable to a binary string with

.RS
export SOMETHING=$(scotty)
.RE

You can "silently" read (e.g. a password) with

.RS
scotty 2>> /dev/null | auth
.RE

If you are piping to a program that requires a TTY for stdin, you can trick it
using a pty. One way to do this is with
.BR script(1)
as shown:

.RS
$ scotty | script -q /dev/null python -c "import sys; print sys.stdin.isatty()"

True
.RE
